{
	"name": "df_parse_traffic_data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_traffic_data_json",
						"type": "DatasetReference"
					},
					"name": "jsonsource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_traffic_data_silver",
						"type": "DatasetReference"
					},
					"name": "csvSink"
				}
			],
			"transformations": [
				{
					"name": "flattenTrafficeData"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          detectorData as (controllerid as integer, detectorid as integer, measuretime as string, measuretimestring as string, intervall as integer, numvehicles as integer, state as integer, error as string)[],",
				"          status as string,",
				"          message as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> jsonsource",
				"jsonsource foldDown(unroll(detectorData, detectorData),",
				"     mapColumn(",
				"          controllerid = detectorData.controllerid,",
				"          detectorid = detectorData.detectorid,",
				"          error = detectorData.error,",
				"          intervall = detectorData.intervall,",
				"          measuretime = detectorData.measuretime,",
				"          measuretimestring = detectorData.measuretimestring,",
				"          numvehicles = detectorData.numvehicles,",
				"          state = detectorData.state",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenTrafficeData",
				"flattenTrafficeData derive(DetectorUniqueID = toInteger(toString(controllerid)+toString(detectorid))) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('traffic',toString(random(1),'###0'),'.csv'))],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> csvSink"
			]
		}
	}
}