{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "cegekamadatafactory"
		},
		"ls_datalake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_datalake'"
		},
		"ls_staging_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_staging'"
		},
		"ls_datalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://cegekamadatalake.dfs.core.windows.net/"
		},
		"ls_lpg_traffic_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://opendata.linkoping.se/WS_OpenData/Open.svc/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ls_datalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked service for default data lake",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_datalake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_datalake_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_lpg_traffic')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linkoping traffic lights",
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_lpg_traffic_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_staging')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Default staging ",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_staging_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_silver_detectors')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "traffic_detectors.csv",
						"folderPath": "lights",
						"fileSystem": "trafficdetectors"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_traffic_data_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lpg_traffic",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "TrafikdataDetektorData?CustomKey=11884d48cccc4ee6bbc6b366cf318964&ControllerID=2&DetectorID=4&DateFrom=2017-05-01&DateTo=2017-05-02"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lpg_traffic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_traffic_data_stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_staging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "traffic.json",
						"container": "default"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_staging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_traffic_lights_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lpg_traffic",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "TrafikdataDetektorInfo?CustomKey=11884d48cccc4ee6bbc6b366cf318964"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lpg_traffic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_traffic_lights_staging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_staging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "traffic_lights.json",
						"container": "default"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_staging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_parse_traffice_detectors')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_traffic_lights_staging",
								"type": "DatasetReference"
							},
							"name": "jsonsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_silver_detectors",
								"type": "DatasetReference"
							},
							"name": "csvSink"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumnUniqueID"
						}
					],
					"scriptLines": [
						"source(output(",
						"          detectorListGeoJSON as (features as (geometry as (coordinates as double[], type as string), properties as (controllerid as short, degree as short, description as string, detectorid as short, latitude as double, longitude as double, name as string, x_sweref991500 as double, y_sweref991500 as double), type as string)[], type as string),",
						"          message as string,",
						"          status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> jsonsource",
						"jsonsource foldDown(unroll(detectorListGeoJSON.features),",
						"     mapColumn(",
						"          ControllerID = detectorListGeoJSON.features.properties.controllerid,",
						"          DetectorID = detectorListGeoJSON.features.properties.detectorid,",
						"          Description = detectorListGeoJSON.features.properties.description,",
						"          name = detectorListGeoJSON.features.properties.name,",
						"          latitude = detectorListGeoJSON.features.properties.latitude,",
						"          longitude = detectorListGeoJSON.features.properties.longitude",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(UniqueID = toInteger(toString(ControllerID)+toString(DetectorID))) ~> derivedColumnUniqueID",
						"derivedColumnUniqueID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['traffic_detectors.csv'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> csvSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_traffic_lights_staging')]",
				"[concat(variables('factoryId'), '/datasets/ds_silver_detectors')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stg_rest_api_requests')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_traffic_detectors",
						"description": "Get a list of traffic detectors ",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_traffic_lights_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_traffic_lights_staging",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "get_traffic_data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "get_traffic_detectors",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_traffic_data_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_traffic_data_stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "parse_traffice_detectors",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "get_traffic_detectors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_parse_traffice_detectors",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"jsonsource": {},
									"csvSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DP500"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_traffic_lights_source')]",
				"[concat(variables('factoryId'), '/datasets/ds_traffic_lights_staging')]",
				"[concat(variables('factoryId'), '/datasets/ds_traffic_data_source')]",
				"[concat(variables('factoryId'), '/datasets/ds_traffic_data_stage')]",
				"[concat(variables('factoryId'), '/dataflows/df_parse_traffice_detectors')]"
			]
		}
	]
}